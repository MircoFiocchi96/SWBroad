{"ast":null,"code":"import { take, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport { eventChannel } from 'redux-saga';\nimport { INITIATE_WS_CONNECTION, SEND_BY_WS, ADD_VIEWER } from './constants';\nimport getWebSocket from '../../utils/getWebSocket';\nimport { displayNotification } from '../Notifications/actions';\nimport { WSConnected } from './actions';\nimport * as streamsApi from '../../api/streams';\nexport default function* rootSaga() {\n  yield fork(flow);\n}\nexport function* flow() {\n  yield take(INITIATE_WS_CONNECTION);\n  const socket = yield call(connect);\n  yield put(WSConnected(socket.id));\n  yield fork(read, socket);\n  yield fork(write, socket);\n}\n\nfunction connect() {\n  const socket = getWebSocket();\n  return new Promise(resolve => {\n    socket.on('connect', () => {\n      resolve(socket);\n      console.log('Socket connected');\n    });\n  });\n}\n\nfunction* read(socket) {\n  const channel = yield call(subscribe, socket);\n\n  while (true) {\n    let action = yield take(channel);\n    yield put(action);\n  }\n}\n\nexport function subscribe(socket) {\n  return new eventChannel(emit => {\n    const update = data => {\n      return emit(displayNotification({\n        message: data\n      }));\n    };\n\n    console.log('socket listening on test');\n    socket.on('test', update);\n    return () => {};\n  });\n}\nexport function* write(socket) {\n  while (true) {\n    const {\n      data\n    } = yield take(SEND_BY_WS);\n    console.log('data sent to ws', data);\n    socket.emit(data.type, data.info);\n  }\n}\nexport function* addViewerSaga() {\n  yield takeLatest(ADD_VIEWER, addViewer);\n}\nexport function* addViewer(action) {\n  try {\n    const result = yield streamsApi.addViewer(action.payload);\n  } catch (error) {\n    console.error(error);\n  }\n}","map":{"version":3,"sources":["C:/Users/MircoFiocchi/Desktop/BroadcastApp/client/src/containers/App/saga.js"],"names":["take","fork","call","put","takeLatest","eventChannel","INITIATE_WS_CONNECTION","SEND_BY_WS","ADD_VIEWER","getWebSocket","displayNotification","WSConnected","streamsApi","rootSaga","flow","socket","connect","id","read","write","Promise","resolve","on","console","log","channel","subscribe","action","emit","update","data","message","type","info","addViewerSaga","addViewer","result","payload","error"],"mappings":"AAAA,SAASA,IAAT,EAAeC,IAAf,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,sBAAT,EAAiCC,UAAjC,EAA6CC,UAA7C,QAA+D,aAA/D;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAO,KAAKC,UAAZ,MAA4B,mBAA5B;AAEA,eAAe,UAAUC,QAAV,GAAqB;AAClC,QAAMZ,IAAI,CAACa,IAAD,CAAV;AACD;AAED,OAAO,UAAUA,IAAV,GAAiB;AACtB,QAAMd,IAAI,CAACM,sBAAD,CAAV;AACA,QAAMS,MAAM,GAAG,MAAMb,IAAI,CAACc,OAAD,CAAzB;AACA,QAAMb,GAAG,CAACQ,WAAW,CAACI,MAAM,CAACE,EAAR,CAAZ,CAAT;AACA,QAAMhB,IAAI,CAACiB,IAAD,EAAOH,MAAP,CAAV;AACA,QAAMd,IAAI,CAACkB,KAAD,EAAQJ,MAAR,CAAV;AACD;;AAED,SAASC,OAAT,GAAmB;AACjB,QAAMD,MAAM,GAAGN,YAAY,EAA3B;AACA,SAAO,IAAIW,OAAJ,CAAaC,OAAD,IAAa;AAC9BN,IAAAA,MAAM,CAACO,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBD,MAAAA,OAAO,CAACN,MAAD,CAAP;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,KAHD;AAID,GALM,CAAP;AAMD;;AAED,UAAUN,IAAV,CAAeH,MAAf,EAAuB;AACrB,QAAMU,OAAO,GAAG,MAAMvB,IAAI,CAACwB,SAAD,EAAYX,MAAZ,CAA1B;;AACA,SAAO,IAAP,EAAa;AACX,QAAIY,MAAM,GAAG,MAAM3B,IAAI,CAACyB,OAAD,CAAvB;AACA,UAAMtB,GAAG,CAACwB,MAAD,CAAT;AACD;AACF;;AAED,OAAO,SAASD,SAAT,CAAmBX,MAAnB,EAA2B;AAChC,SAAO,IAAIV,YAAJ,CAAkBuB,IAAD,IAAU;AAChC,UAAMC,MAAM,GAAIC,IAAD,IAAU;AACvB,aAAOF,IAAI,CAAClB,mBAAmB,CAAC;AAAEqB,QAAAA,OAAO,EAAED;AAAX,OAAD,CAApB,CAAX;AACD,KAFD;;AAGAP,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAT,IAAAA,MAAM,CAACO,EAAP,CAAU,MAAV,EAAkBO,MAAlB;AACA,WAAO,MAAM,CAAE,CAAf;AACD,GAPM,CAAP;AAQD;AAED,OAAO,UAAUV,KAAV,CAAgBJ,MAAhB,EAAwB;AAC7B,SAAO,IAAP,EAAa;AACX,UAAM;AAAEe,MAAAA;AAAF,QAAW,MAAM9B,IAAI,CAACO,UAAD,CAA3B;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BM,IAA/B;AACAf,IAAAA,MAAM,CAACa,IAAP,CAAYE,IAAI,CAACE,IAAjB,EAAuBF,IAAI,CAACG,IAA5B;AACD;AACF;AAED,OAAO,UAAUC,aAAV,GAA0B;AAC/B,QAAM9B,UAAU,CAACI,UAAD,EAAa2B,SAAb,CAAhB;AACD;AAED,OAAO,UAAUA,SAAV,CAAoBR,MAApB,EAA4B;AACjC,MAAI;AACF,UAAMS,MAAM,GAAG,MAAMxB,UAAU,CAACuB,SAAX,CAAqBR,MAAM,CAACU,OAA5B,CAArB;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACdf,IAAAA,OAAO,CAACe,KAAR,CAAcA,KAAd;AACD;AACF","sourcesContent":["import { take, fork, call, put, takeLatest } from 'redux-saga/effects';\r\nimport { eventChannel } from 'redux-saga';\r\nimport { INITIATE_WS_CONNECTION, SEND_BY_WS, ADD_VIEWER } from './constants';\r\nimport getWebSocket from '../../utils/getWebSocket';\r\nimport { displayNotification } from '../Notifications/actions';\r\nimport { WSConnected } from './actions';\r\nimport * as streamsApi from '../../api/streams';\r\n\r\nexport default function* rootSaga() {\r\n  yield fork(flow);\r\n}\r\n\r\nexport function* flow() {\r\n  yield take(INITIATE_WS_CONNECTION);\r\n  const socket = yield call(connect);\r\n  yield put(WSConnected(socket.id));\r\n  yield fork(read, socket);\r\n  yield fork(write, socket);\r\n}\r\n\r\nfunction connect() {\r\n  const socket = getWebSocket();\r\n  return new Promise((resolve) => {\r\n    socket.on('connect', () => {\r\n      resolve(socket);\r\n      console.log('Socket connected');\r\n    });\r\n  });\r\n}\r\n\r\nfunction* read(socket) {\r\n  const channel = yield call(subscribe, socket);\r\n  while (true) {\r\n    let action = yield take(channel);\r\n    yield put(action);\r\n  }\r\n}\r\n\r\nexport function subscribe(socket) {\r\n  return new eventChannel((emit) => {\r\n    const update = (data) => {\r\n      return emit(displayNotification({ message: data }));\r\n    };\r\n    console.log('socket listening on test');\r\n    socket.on('test', update);\r\n    return () => {};\r\n  });\r\n}\r\n\r\nexport function* write(socket) {\r\n  while (true) {\r\n    const { data } = yield take(SEND_BY_WS);\r\n    console.log('data sent to ws', data);\r\n    socket.emit(data.type, data.info);\r\n  }\r\n}\r\n\r\nexport function* addViewerSaga() {\r\n  yield takeLatest(ADD_VIEWER, addViewer);\r\n}\r\n\r\nexport function* addViewer(action) {\r\n  try {\r\n    const result = yield streamsApi.addViewer(action.payload);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}