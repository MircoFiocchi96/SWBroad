{"ast":null,"code":"import axiosInstance from '../../utils/api';\nimport streamQuery from '../DTOs/streamQuery/streamQuery';\n\nconst successCallback = response => {\n  return response.data.data;\n};\n\nconst errorCallbackDefault = error => {\n  return [];\n};\n\nconst generateQueryString = streamQuery => {\n  const keys = Object.keys(streamQuery).filter(p => streamQuery[p] !== undefined);\n\n  if (keys.length === 0) {\n    return;\n  }\n\n  let res = '?' + keys[0] + '=' + streamQuery[keys[0]];\n\n  for (let i = 1; i < keys.length; i++) {\n    res += '&' + keys[i] + '=' + streamQuery[keys[i]];\n  }\n\n  return res;\n};\n\nexport async function get(data, callback = successCallback, errorCallback = errorCallbackDefault) {\n  const query = new streamQuery(data);\n  const queryString = generateQueryString(query);\n  const url = queryString ? `/streams/${queryString}` : `/streams/`;\n  const request = await axiosInstance.get(url).then(callback, errorCallback);\n  return request;\n}\nexport async function getById(id, //{ id, token },\ncallback = successCallback, errorCallback = errorCallbackDefault) {\n  // axiosInstance.interceptors.request.use(function (config) {\n  //   config.headers.Authorization = token ? `Bearer ${token}` : \"\";\n  //   return config;\n  // });\n  const request = await axiosInstance.get(`/streams/` + id).then(callback, errorCallback);\n  const result = request ? request[0] : null;\n  return result;\n}","map":{"version":3,"sources":["C:/Users/MircoFiocchi/Desktop/BroadcastApp/client/src/api/streams/get.js"],"names":["axiosInstance","streamQuery","successCallback","response","data","errorCallbackDefault","error","generateQueryString","keys","Object","filter","p","undefined","length","res","i","get","callback","errorCallback","query","queryString","url","request","then","getById","id","result"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,iCAAxB;;AAEA,MAAMC,eAAe,GAAIC,QAAD,IAAc;AACpC,SAAOA,QAAQ,CAACC,IAAT,CAAcA,IAArB;AACD,CAFD;;AAIA,MAAMC,oBAAoB,GAAIC,KAAD,IAAW;AACtC,SAAO,EAAP;AACD,CAFD;;AAIA,MAAMC,mBAAmB,GAAIN,WAAD,IAAiB;AAC3C,QAAMO,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYP,WAAZ,EAAyBS,MAAzB,CACVC,CAAD,IAAOV,WAAW,CAACU,CAAD,CAAX,KAAmBC,SADf,CAAb;;AAGA,MAAIJ,IAAI,CAACK,MAAL,KAAgB,CAApB,EAAuB;AACrB;AACD;;AACD,MAAIC,GAAG,GAAG,MAAMN,IAAI,CAAC,CAAD,CAAV,GAAgB,GAAhB,GAAsBP,WAAW,CAACO,IAAI,CAAC,CAAD,CAAL,CAA3C;;AAEA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAAI,CAACK,MAAzB,EAAiCE,CAAC,EAAlC,EAAsC;AACpCD,IAAAA,GAAG,IAAI,MAAMN,IAAI,CAACO,CAAD,CAAV,GAAgB,GAAhB,GAAsBd,WAAW,CAACO,IAAI,CAACO,CAAD,CAAL,CAAxC;AACD;;AAED,SAAOD,GAAP;AACD,CAdD;;AAgBA,OAAO,eAAeE,GAAf,CACLZ,IADK,EAELa,QAAQ,GAAGf,eAFN,EAGLgB,aAAa,GAAGb,oBAHX,EAIL;AACA,QAAMc,KAAK,GAAG,IAAIlB,WAAJ,CAAgBG,IAAhB,CAAd;AACA,QAAMgB,WAAW,GAAGb,mBAAmB,CAACY,KAAD,CAAvC;AACA,QAAME,GAAG,GAAGD,WAAW,GAAI,YAAWA,WAAY,EAA3B,GAAgC,WAAvD;AACA,QAAME,OAAO,GAAG,MAAMtB,aAAa,CAACgB,GAAd,CAAkBK,GAAlB,EAAuBE,IAAvB,CAA4BN,QAA5B,EAAsCC,aAAtC,CAAtB;AAEA,SAAOI,OAAP;AACD;AAED,OAAO,eAAeE,OAAf,CACLC,EADK,EAEL;AACAR,QAAQ,GAAGf,eAHN,EAILgB,aAAa,GAAGb,oBAJX,EAKL;AACA;AACA;AACA;AACA;AAEA,QAAMiB,OAAO,GAAG,MAAMtB,aAAa,CAChCgB,GADmB,CACd,WAAD,GAAcS,EADC,EAEnBF,IAFmB,CAEdN,QAFc,EAEJC,aAFI,CAAtB;AAIA,QAAMQ,MAAM,GAAGJ,OAAO,GAAGA,OAAO,CAAC,CAAD,CAAV,GAAgB,IAAtC;AACA,SAAOI,MAAP;AACD","sourcesContent":["import axiosInstance from '../../utils/api';\r\nimport streamQuery from '../DTOs/streamQuery/streamQuery';\r\n\r\nconst successCallback = (response) => {\r\n  return response.data.data;\r\n};\r\n\r\nconst errorCallbackDefault = (error) => {\r\n  return [];\r\n};\r\n\r\nconst generateQueryString = (streamQuery) => {\r\n  const keys = Object.keys(streamQuery).filter(\r\n    (p) => streamQuery[p] !== undefined\r\n  );\r\n  if (keys.length === 0) {\r\n    return;\r\n  }\r\n  let res = '?' + keys[0] + '=' + streamQuery[keys[0]];\r\n\r\n  for (let i = 1; i < keys.length; i++) {\r\n    res += '&' + keys[i] + '=' + streamQuery[keys[i]];\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\nexport async function get(\r\n  data,\r\n  callback = successCallback,\r\n  errorCallback = errorCallbackDefault\r\n) {\r\n  const query = new streamQuery(data);\r\n  const queryString = generateQueryString(query);\r\n  const url = queryString ? `/streams/${queryString}` : `/streams/`;\r\n  const request = await axiosInstance.get(url).then(callback, errorCallback);\r\n\r\n  return request;\r\n}\r\n\r\nexport async function getById(\r\n  id,\r\n  //{ id, token },\r\n  callback = successCallback,\r\n  errorCallback = errorCallbackDefault\r\n) {\r\n  // axiosInstance.interceptors.request.use(function (config) {\r\n  //   config.headers.Authorization = token ? `Bearer ${token}` : \"\";\r\n  //   return config;\r\n  // });\r\n\r\n  const request = await axiosInstance\r\n    .get(`/streams/` + id)\r\n    .then(callback, errorCallback);\r\n\r\n  const result = request ? request[0] : null;\r\n  return result;\r\n}"]},"metadata":{},"sourceType":"module"}