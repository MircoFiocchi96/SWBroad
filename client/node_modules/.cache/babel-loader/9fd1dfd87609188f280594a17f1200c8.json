{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\MircoFiocchi\\\\Desktop\\\\BroadcastApp\\\\client\\\\src\\\\containers\\\\StreamView\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Auth_NicknameSelector, Auth_AccessTokenSelector } from '../Auth/selectors';\nimport { HOST, PARTICIPANT } from './constants';\nimport { StreamViewLayout, StreamViewerLayout } from './StreamViewStyles.elements';\nimport MediaSelector from '../MediaSelector';\nimport Red5Content from '../Red5Content';\nimport SubscribersList from '../SubscribersList';\nimport { FooterWrapper } from './StreamViewStyles.elements';\nimport { App_WSConnectedSelector, App_WSConnectionID } from '../App/selectors';\nimport { AddViewer } from '../App/actions';\nexport default function StreamView() {\n  _s();\n\n  const nickname = useSelector(Auth_NicknameSelector);\n  const token = useSelector(Auth_AccessTokenSelector);\n  const WSConnected = useSelector(App_WSConnectedSelector);\n  const WSConnectionID = useSelector(App_WSConnectionID);\n  const {\n    URLNickname\n  } = useParams();\n  const role = nickname === URLNickname ? HOST : PARTICIPANT;\n  const dispatch = useDispatch();\n  const dataInfo = useMemo(() => {\n    return token ? {\n      nickname: URLNickname,\n      token\n    } : {\n      nickname: URLNickname,\n      name: nickname + Math.floor(Math.random() * 0x10000).toString(16)\n    };\n  }, [token, URLNickname, nickname]);\n  useEffect(() => {\n    if (WSConnected) {\n      dispatch(AddViewer({\n        connectionId: WSConnectionID,\n        ...dataInfo\n      }));\n    }\n  }, [dispatch, dataInfo, WSConnected, WSConnectionID]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: role === HOST ? /*#__PURE__*/_jsxDEV(StreamViewLayout, {\n      children: [role === HOST && /*#__PURE__*/_jsxDEV(MediaSelector, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(Red5Content, {\n        role: role,\n        nickname: URLNickname\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SubscribersList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(StreamViewerLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Red5Content, {\n        role: role,\n        nickname: URLNickname\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SubscribersList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(StreamView, \"6IFtjNCibRhCl/r9pIv3Aartfn8=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useParams, useDispatch];\n});\n\n_c = StreamView;\n\nvar _c;\n\n$RefreshReg$(_c, \"StreamView\");","map":{"version":3,"sources":["C:/Users/MircoFiocchi/Desktop/BroadcastApp/client/src/containers/StreamView/index.js"],"names":["React","useEffect","useMemo","useSelector","useParams","useDispatch","Auth_NicknameSelector","Auth_AccessTokenSelector","HOST","PARTICIPANT","StreamViewLayout","StreamViewerLayout","MediaSelector","Red5Content","SubscribersList","FooterWrapper","App_WSConnectedSelector","App_WSConnectionID","AddViewer","StreamView","nickname","token","WSConnected","WSConnectionID","URLNickname","role","dispatch","dataInfo","name","Math","floor","random","toString","connectionId"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,QAA0C,OAA1C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SACEC,qBADF,EAEEC,wBAFF,QAGO,mBAHP;AAIA,SAASC,IAAT,EAAeC,WAAf,QAAkC,aAAlC;AAEA,SACEC,gBADF,EAEEC,kBAFF,QAGO,6BAHP;AAIA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,uBAAT,EAAkCC,kBAAlC,QAA4D,kBAA5D;AAEA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,eAAe,SAASC,UAAT,GAAsB;AAAA;;AACnC,QAAMC,QAAQ,GAAGjB,WAAW,CAACG,qBAAD,CAA5B;AACA,QAAMe,KAAK,GAAGlB,WAAW,CAACI,wBAAD,CAAzB;AACA,QAAMe,WAAW,GAAGnB,WAAW,CAACa,uBAAD,CAA/B;AACA,QAAMO,cAAc,GAAGpB,WAAW,CAACc,kBAAD,CAAlC;AAEA,QAAM;AAAEO,IAAAA;AAAF,MAAkBpB,SAAS,EAAjC;AACA,QAAMqB,IAAI,GAAGL,QAAQ,KAAKI,WAAb,GAA2BhB,IAA3B,GAAkCC,WAA/C;AACA,QAAMiB,QAAQ,GAAGrB,WAAW,EAA5B;AAEA,QAAMsB,QAAQ,GAAGzB,OAAO,CAAC,MAAM;AAC7B,WAAOmB,KAAK,GACR;AAAED,MAAAA,QAAQ,EAAEI,WAAZ;AAAyBH,MAAAA;AAAzB,KADQ,GAER;AACED,MAAAA,QAAQ,EAAEI,WADZ;AAEEI,MAAAA,IAAI,EAAER,QAAQ,GAAGS,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,OAA3B,EAAoCC,QAApC,CAA6C,EAA7C;AAFnB,KAFJ;AAMD,GAPuB,EAOrB,CAACX,KAAD,EAAQG,WAAR,EAAqBJ,QAArB,CAPqB,CAAxB;AASAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,WAAJ,EAAiB;AACfI,MAAAA,QAAQ,CAACR,SAAS,CAAC;AAAEe,QAAAA,YAAY,EAAEV,cAAhB;AAAgC,WAAGI;AAAnC,OAAD,CAAV,CAAR;AACD;AACF,GAJQ,EAIN,CAACD,QAAD,EAAWC,QAAX,EAAqBL,WAArB,EAAkCC,cAAlC,CAJM,CAAT;AAMA,sBACE;AAAA,cACGE,IAAI,KAAKjB,IAAT,gBACC,QAAC,gBAAD;AAAA,iBACGiB,IAAI,KAAKjB,IAAT,iBAAiB,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,cADpB,eAEE,QAAC,WAAD;AAAa,QAAA,IAAI,EAAEiB,IAAnB;AAAyB,QAAA,QAAQ,EAAED;AAAnC;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,gBAOC,QAAC,kBAAD;AAAA,8BACE,QAAC,WAAD;AAAa,QAAA,IAAI,EAAEC,IAAnB;AAAyB,QAAA,QAAQ,EAAED;AAAnC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AARJ,mBADF;AAgBD;;GAzCuBL,U;UACLhB,W,EACHA,W,EACMA,W,EACGA,W,EAECC,S,EAEPC,W;;;KARKc,U","sourcesContent":["import React, { useEffect, useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport {\r\n  Auth_NicknameSelector,\r\n  Auth_AccessTokenSelector,\r\n} from '../Auth/selectors';\r\nimport { HOST, PARTICIPANT } from './constants';\r\n\r\nimport {\r\n  StreamViewLayout,\r\n  StreamViewerLayout,\r\n} from './StreamViewStyles.elements';\r\nimport MediaSelector from '../MediaSelector';\r\nimport Red5Content from '../Red5Content';\r\nimport SubscribersList from '../SubscribersList';\r\nimport { FooterWrapper } from './StreamViewStyles.elements';\r\nimport { App_WSConnectedSelector, App_WSConnectionID } from '../App/selectors';\r\n\r\nimport { AddViewer } from '../App/actions';\r\n\r\nexport default function StreamView() {\r\n  const nickname = useSelector(Auth_NicknameSelector);\r\n  const token = useSelector(Auth_AccessTokenSelector);\r\n  const WSConnected = useSelector(App_WSConnectedSelector);\r\n  const WSConnectionID = useSelector(App_WSConnectionID);\r\n\r\n  const { URLNickname } = useParams();\r\n  const role = nickname === URLNickname ? HOST : PARTICIPANT;\r\n  const dispatch = useDispatch();\r\n\r\n  const dataInfo = useMemo(() => {\r\n    return token\r\n      ? { nickname: URLNickname, token }\r\n      : {\r\n          nickname: URLNickname,\r\n          name: nickname + Math.floor(Math.random() * 0x10000).toString(16),\r\n        };\r\n  }, [token, URLNickname, nickname]);\r\n\r\n  useEffect(() => {\r\n    if (WSConnected) {\r\n      dispatch(AddViewer({ connectionId: WSConnectionID, ...dataInfo }));\r\n    }\r\n  }, [dispatch, dataInfo, WSConnected, WSConnectionID]);\r\n\r\n  return (\r\n    <>\r\n      {role === HOST ? (\r\n        <StreamViewLayout>\r\n          {role === HOST && <MediaSelector />}\r\n          <Red5Content role={role} nickname={URLNickname} />\r\n          <SubscribersList />\r\n        </StreamViewLayout>\r\n      ) : (\r\n        <StreamViewerLayout>\r\n          <Red5Content role={role} nickname={URLNickname} />\r\n          <SubscribersList />\r\n        </StreamViewerLayout>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}