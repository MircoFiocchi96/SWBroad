{"ast":null,"code":"import { takeLatest, put, select } from 'redux-saga/effects';\nimport { SAVE_USER_CONFIGURATIONS, LOAD_USER_CONFIGURATIONS, SAVE_USER_CONFIGURATIONS_SUCCESS, LOAD_USER_CONFIGURATIONS_SUCCESS } from './constants';\nimport { loadUserConfigSuccess, openUserConfig, saveUserConfigSuccess } from './actions';\nimport { userConfig_NicknameSelector } from './selectors';\nimport { Auth_AccessTokenSelector, Auth_FetchingTokenSelector } from '../Auth/selectors';\nimport { userLogin } from '../Auth/actions';\nimport { push } from 'connected-react-router';\nimport { Auth_NicknameSelector } from '../Auth/selectors';\nexport default function* userConfigurationSaga() {\n  yield takeLatest(LOAD_USER_CONFIGURATIONS, loadUserConfiguration);\n  yield takeLatest(LOAD_USER_CONFIGURATIONS_SUCCESS, saveUserConfigurationSuccess);\n  yield takeLatest(SAVE_USER_CONFIGURATIONS, saveUserConfiguration);\n  yield takeLatest(SAVE_USER_CONFIGURATIONS_SUCCESS, saveUserConfigurationSuccess);\n}\n\nfunction* loadUserConfiguration() {\n  const fetchingToken = yield select(Auth_FetchingTokenSelector);\n\n  if (fetchingToken) {\n    return;\n  }\n\n  const accessToken = yield select(Auth_AccessTokenSelector);\n\n  if (!accessToken) {\n    yield put(userLogin());\n    return;\n  }\n\n  const nickname = yield select(Auth_NicknameSelector);\n\n  if (nickname) {\n    yield put(loadUserConfigSuccess(nickname));\n  } else {\n    yield put(openUserConfig());\n  }\n}\n\nexport function* saveUserConfiguration() {\n  const nickname = yield select(userConfig_NicknameSelector);\n  yield put(saveUserConfigSuccess(nickname));\n}\nexport function* saveUserConfigurationSuccess(action) {\n  yield put(push(action.payload));\n}","map":{"version":3,"sources":["C:/Users/MircoFiocchi/Desktop/BroadcastApp/client/src/containers/UserConfigurations/saga.js"],"names":["takeLatest","put","select","SAVE_USER_CONFIGURATIONS","LOAD_USER_CONFIGURATIONS","SAVE_USER_CONFIGURATIONS_SUCCESS","LOAD_USER_CONFIGURATIONS_SUCCESS","loadUserConfigSuccess","openUserConfig","saveUserConfigSuccess","userConfig_NicknameSelector","Auth_AccessTokenSelector","Auth_FetchingTokenSelector","userLogin","push","Auth_NicknameSelector","userConfigurationSaga","loadUserConfiguration","saveUserConfigurationSuccess","saveUserConfiguration","fetchingToken","accessToken","nickname","action","payload"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,MAA1B,QAAwC,oBAAxC;AACA,SACEC,wBADF,EAEEC,wBAFF,EAGEC,gCAHF,EAIEC,gCAJF,QAKO,aALP;AAMA,SACEC,qBADF,EAEEC,cAFF,EAGEC,qBAHF,QAIO,WAJP;AAKA,SAASC,2BAAT,QAA4C,aAA5C;AACA,SACEC,wBADF,EAEEC,0BAFF,QAGO,mBAHP;AAIA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,qBAAT,QAAsC,mBAAtC;AAEA,eAAe,UAAUC,qBAAV,GAAkC;AAC/C,QAAMhB,UAAU,CAACI,wBAAD,EAA2Ba,qBAA3B,CAAhB;AACA,QAAMjB,UAAU,CACdM,gCADc,EAEdY,4BAFc,CAAhB;AAIA,QAAMlB,UAAU,CAACG,wBAAD,EAA2BgB,qBAA3B,CAAhB;AACA,QAAMnB,UAAU,CACdK,gCADc,EAEda,4BAFc,CAAhB;AAID;;AAED,UAAUD,qBAAV,GAAkC;AAChC,QAAMG,aAAa,GAAG,MAAMlB,MAAM,CAACU,0BAAD,CAAlC;;AACA,MAAIQ,aAAJ,EAAmB;AACjB;AACD;;AACD,QAAMC,WAAW,GAAG,MAAMnB,MAAM,CAACS,wBAAD,CAAhC;;AACA,MAAI,CAACU,WAAL,EAAkB;AAChB,UAAMpB,GAAG,CAACY,SAAS,EAAV,CAAT;AACA;AACD;;AACD,QAAMS,QAAQ,GAAG,MAAMpB,MAAM,CAACa,qBAAD,CAA7B;;AACA,MAAIO,QAAJ,EAAc;AACZ,UAAMrB,GAAG,CAACM,qBAAqB,CAACe,QAAD,CAAtB,CAAT;AACD,GAFD,MAEO;AACL,UAAMrB,GAAG,CAACO,cAAc,EAAf,CAAT;AACD;AACF;;AAED,OAAO,UAAUW,qBAAV,GAAkC;AACvC,QAAMG,QAAQ,GAAG,MAAMpB,MAAM,CAACQ,2BAAD,CAA7B;AACA,QAAMT,GAAG,CAACQ,qBAAqB,CAACa,QAAD,CAAtB,CAAT;AACD;AAED,OAAO,UAAUJ,4BAAV,CAAuCK,MAAvC,EAA+C;AACpD,QAAMtB,GAAG,CAACa,IAAI,CAACS,MAAM,CAACC,OAAR,CAAL,CAAT;AACD","sourcesContent":["import { takeLatest, put, select } from 'redux-saga/effects';\r\nimport {\r\n  SAVE_USER_CONFIGURATIONS,\r\n  LOAD_USER_CONFIGURATIONS,\r\n  SAVE_USER_CONFIGURATIONS_SUCCESS,\r\n  LOAD_USER_CONFIGURATIONS_SUCCESS,\r\n} from './constants';\r\nimport {\r\n  loadUserConfigSuccess,\r\n  openUserConfig,\r\n  saveUserConfigSuccess,\r\n} from './actions';\r\nimport { userConfig_NicknameSelector } from './selectors';\r\nimport {\r\n  Auth_AccessTokenSelector,\r\n  Auth_FetchingTokenSelector,\r\n} from '../Auth/selectors';\r\nimport { userLogin } from '../Auth/actions';\r\nimport { push } from 'connected-react-router';\r\nimport { Auth_NicknameSelector } from '../Auth/selectors';\r\n\r\nexport default function* userConfigurationSaga() {\r\n  yield takeLatest(LOAD_USER_CONFIGURATIONS, loadUserConfiguration);\r\n  yield takeLatest(\r\n    LOAD_USER_CONFIGURATIONS_SUCCESS,\r\n    saveUserConfigurationSuccess\r\n  );\r\n  yield takeLatest(SAVE_USER_CONFIGURATIONS, saveUserConfiguration);\r\n  yield takeLatest(\r\n    SAVE_USER_CONFIGURATIONS_SUCCESS,\r\n    saveUserConfigurationSuccess\r\n  );\r\n}\r\n\r\nfunction* loadUserConfiguration() {\r\n  const fetchingToken = yield select(Auth_FetchingTokenSelector);\r\n  if (fetchingToken) {\r\n    return;\r\n  }\r\n  const accessToken = yield select(Auth_AccessTokenSelector);\r\n  if (!accessToken) {\r\n    yield put(userLogin());\r\n    return;\r\n  }\r\n  const nickname = yield select(Auth_NicknameSelector);\r\n  if (nickname) {\r\n    yield put(loadUserConfigSuccess(nickname));\r\n  } else {\r\n    yield put(openUserConfig());\r\n  }\r\n}\r\n\r\nexport function* saveUserConfiguration() {\r\n  const nickname = yield select(userConfig_NicknameSelector);\r\n  yield put(saveUserConfigSuccess(nickname));\r\n}\r\n\r\nexport function* saveUserConfigurationSuccess(action) {\r\n  yield put(push(action.payload));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}