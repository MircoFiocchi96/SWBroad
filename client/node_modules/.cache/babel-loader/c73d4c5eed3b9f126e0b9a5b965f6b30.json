{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\MircoFiocchi\\\\Desktop\\\\BroadcastApp\\\\client\\\\src\\\\containers\\\\Red5Content\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { HOST } from '../StreamView/constants';\nimport { startStream } from './actions';\nimport { PublisherConfig, SubscriberConfig } from '../../config/red5Pro';\nimport Video from '../../components/Video';\nimport { VideoWrapper } from '../StreamView/StreamViewStyles.elements';\nimport { publisherIFrameConfig } from '../../config/iframe';\nimport { Red5ProConfig } from '../../config/red5Pro';\nimport { IframeContainer } from '../StreamView/StreamViewStyles.elements';\nimport AnimatedButton from '../../components/Global/AnimatedButton';\nimport { displayNotification } from '../Notifications/actions';\nimport { hostConnected } from '../App/actions';\nexport default function Red5Content({\n  role,\n  nickname,\n  connected\n}) {\n  _s();\n\n  const [started, setStarted] = useState(false);\n  const videoElementID = 'red5ProMediaElement';\n  const dispatch = useDispatch();\n  const configure = useCallback(async ({\n    Red5Element,\n    method,\n    streamName,\n    mediaElementId\n  }) => {\n    try {\n      const operation = role === HOST ? 'broadcast' : 'subscribe';\n      const nodeDataURL = `https://${Red5ProConfig.host}/streammanager/api/${Red5ProConfig.apiVersion}/event/${Red5ProConfig.nodeApp}/${streamName}?action=${operation}`;\n      const response = await fetch(nodeDataURL);\n      const nodeData = await response.json();\n\n      if (response.status === 200) {\n        await Red5Element.init(method({\n          streamName,\n          mediaElementId,\n          nodeData\n        }));\n        if (role === HOST) Red5Element.publish();else Red5Element.subscribe();\n      } else {\n        dispatch(displayNotification({\n          message: 'Host is not streaming.'\n        }));\n      }\n    } catch (error) {\n      dispatch(displayNotification({\n        message: `error at initializing red5 stream ${error}`,\n        type: 'error'\n      }));\n    }\n  }, [role, dispatch]);\n  const elementCreationMethod = useMemo(() => {\n    return role === HOST ? window.red5prosdk.RTCPublisher : window.red5prosdk.RTCSubscriber;\n  }, [role]);\n  const method = useMemo(() => role === HOST ? PublisherConfig : SubscriberConfig, [role]);\n  const Red5Element = useMemo(() => {\n    return new elementCreationMethod();\n  }, [elementCreationMethod]);\n  const configureAndInit = useCallback(async () => {\n    if (elementCreationMethod) {\n      await configure({\n        Red5Element,\n        method,\n        streamName: nickname,\n        mediaElementId: videoElementID\n      });\n      if (role === HOST) setStarted(true);\n    }\n  }, [elementCreationMethod, method, nickname, Red5Element, role, configure]);\n  const unpublish = useCallback(async () => {\n    await Red5Element.unpublish();\n    setStarted(false);\n  }, [Red5Element]);\n\n  const handleClick = () => {\n    dispatch(startStream());\n    configureAndInit();\n    setStarted(true);\n  };\n\n  useEffect(() => {\n    if (role !== HOST && connected) {\n      configureAndInit();\n    }\n  }, [configureAndInit, role, connected]);\n  return /*#__PURE__*/_jsxDEV(VideoWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Video, {\n      id: videoElementID,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), role === HOST && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(AnimatedButton, {\n        style: {\n          justifySelf: 'end'\n        },\n        onClick: started ? unpublish : handleClick,\n        icon: \"\\uD83D\\uDCF7\",\n        buttonColor: props => props.theme.DeepGreen,\n        hoverColor: props => props.theme.LightGreen,\n        children: started ? 'Stop' : 'Start'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(PublisherIFrame, {\n        url: publisherIFrameConfig.host,\n        nickname: nickname\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Red5Content, \"r6mm3PToUPgPVyVa1S9F+X+br2Y=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Red5Content;\n\nfunction PublisherIFrame({\n  nickname,\n  url\n}) {\n  return /*#__PURE__*/_jsxDEV(IframeContainer, {\n    children: `<iframe\n                src=\"${url}/${nickname}\">\n            </iframe>`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = PublisherIFrame;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Red5Content\");\n$RefreshReg$(_c2, \"PublisherIFrame\");","map":{"version":3,"sources":["C:/Users/MircoFiocchi/Desktop/BroadcastApp/client/src/containers/Red5Content/index.js"],"names":["React","useCallback","useEffect","useMemo","useState","useDispatch","HOST","startStream","PublisherConfig","SubscriberConfig","Video","VideoWrapper","publisherIFrameConfig","Red5ProConfig","IframeContainer","AnimatedButton","displayNotification","hostConnected","Red5Content","role","nickname","connected","started","setStarted","videoElementID","dispatch","configure","Red5Element","method","streamName","mediaElementId","operation","nodeDataURL","host","apiVersion","nodeApp","response","fetch","nodeData","json","status","init","publish","subscribe","message","error","type","elementCreationMethod","window","red5prosdk","RTCPublisher","RTCSubscriber","configureAndInit","unpublish","handleClick","justifySelf","props","theme","DeepGreen","LightGreen","PublisherIFrame","url"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { HOST } from '../StreamView/constants';\r\nimport { startStream } from './actions';\r\n\r\nimport { PublisherConfig, SubscriberConfig } from '../../config/red5Pro';\r\n\r\nimport Video from '../../components/Video';\r\n\r\nimport { VideoWrapper } from '../StreamView/StreamViewStyles.elements';\r\nimport { publisherIFrameConfig } from '../../config/iframe';\r\nimport { Red5ProConfig } from '../../config/red5Pro';\r\n\r\nimport { IframeContainer } from '../StreamView/StreamViewStyles.elements';\r\nimport AnimatedButton from '../../components/Global/AnimatedButton';\r\nimport { displayNotification } from '../Notifications/actions';\r\nimport { hostConnected } from '../App/actions';\r\n\r\nexport default function Red5Content({ role, nickname, connected }) {\r\n  const [started, setStarted] = useState(false);\r\n  const videoElementID = 'red5ProMediaElement';\r\n  const dispatch = useDispatch();\r\n\r\n  const configure = useCallback(\r\n    async ({ Red5Element, method, streamName, mediaElementId }) => {\r\n      try {\r\n        const operation = role === HOST ? 'broadcast' : 'subscribe';\r\n        const nodeDataURL = `https://${Red5ProConfig.host}/streammanager/api/${Red5ProConfig.apiVersion}/event/${Red5ProConfig.nodeApp}/${streamName}?action=${operation}`;\r\n\r\n        const response = await fetch(nodeDataURL);\r\n        const nodeData = await response.json();\r\n\r\n        if (response.status === 200) {\r\n          await Red5Element.init(\r\n            method({\r\n              streamName,\r\n              mediaElementId,\r\n              nodeData,\r\n            })\r\n          );\r\n          if (role === HOST) Red5Element.publish();\r\n          else Red5Element.subscribe();\r\n        } else {\r\n          dispatch(displayNotification({ message: 'Host is not streaming.' }));\r\n        }\r\n      } catch (error) {\r\n        dispatch(\r\n          displayNotification({\r\n            message: `error at initializing red5 stream ${error}`,\r\n            type: 'error',\r\n          })\r\n        );\r\n      }\r\n    },\r\n    [role, dispatch]\r\n  );\r\n\r\n  const elementCreationMethod = useMemo(() => {\r\n    return role === HOST\r\n      ? window.red5prosdk.RTCPublisher\r\n      : window.red5prosdk.RTCSubscriber;\r\n  }, [role]);\r\n\r\n  const method = useMemo(\r\n    () => (role === HOST ? PublisherConfig : SubscriberConfig),\r\n    [role]\r\n  );\r\n\r\n  const Red5Element = useMemo(() => {\r\n    return new elementCreationMethod();\r\n  }, [elementCreationMethod]);\r\n\r\n  const configureAndInit = useCallback(async () => {\r\n    if (elementCreationMethod) {\r\n      await configure({\r\n        Red5Element,\r\n        method,\r\n        streamName: nickname,\r\n        mediaElementId: videoElementID,\r\n      });\r\n      if (role === HOST) setStarted(true);\r\n    }\r\n  }, [elementCreationMethod, method, nickname, Red5Element, role, configure]);\r\n\r\n  const unpublish = useCallback(async () => {\r\n    await Red5Element.unpublish();\r\n    setStarted(false);\r\n  }, [Red5Element]);\r\n\r\n  const handleClick = () => {\r\n    dispatch(startStream());\r\n    configureAndInit();\r\n    setStarted(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (role !== HOST && connected) {\r\n      configureAndInit();\r\n    }\r\n  }, [configureAndInit, role, connected]);\r\n\r\n  return (\r\n    <VideoWrapper>\r\n      <Video id={videoElementID}>\r\n        <div className='video-container'></div>\r\n      </Video>\r\n\r\n      {role === HOST && (\r\n        <>\r\n          <AnimatedButton\r\n            style={{ justifySelf: 'end' }}\r\n            onClick={started ? unpublish : handleClick}\r\n            icon='📷'\r\n            buttonColor={(props) => props.theme.DeepGreen}\r\n            hoverColor={(props) => props.theme.LightGreen}\r\n          >\r\n            {started ? 'Stop' : 'Start'}\r\n          </AnimatedButton>\r\n          <PublisherIFrame\r\n            url={publisherIFrameConfig.host}\r\n            nickname={nickname}\r\n          />\r\n        </>\r\n      )}\r\n    </VideoWrapper>\r\n  );\r\n}\r\n\r\nfunction PublisherIFrame({ nickname, url }) {\r\n  return (\r\n    <IframeContainer>\r\n      {`<iframe\r\n                src=\"${url}/${nickname}\">\r\n            </iframe>`}\r\n    </IframeContainer>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}