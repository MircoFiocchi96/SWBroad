{"ast":null,"code":"/**\r\n * Create the store with dynamic reducers\r\n */\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport createReducer from './reducers';\nimport { initSagas } from './initSagas';\nexport default function getStore(initialState = {}, history) {\n  let composeEnhancers = compose;\n  let reduxSagaMonitorOptions = {};\n  /* istanbul ignore next */\n\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\n    /* eslint-disable no-underscore-dangle */\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\n    if (window.__SAGA_MONITOR_EXTENSION__) reduxSagaMonitorOptions = {\n      sagaMonitor: window.__SAGA_MONITOR_EXTENSION__\n    };\n    /* eslint-enable */\n  }\n\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n  const middlewares = [sagaMiddleware, routerMiddleware(history)];\n  const enhancers = [applyMiddleware(...middlewares)];\n  const store = createStore(createReducer(), initialState, composeEnhancers(...enhancers));\n  initSagas(sagaMiddleware);\n  return store;\n}","map":{"version":3,"sources":["C:/Users/MircoFiocchi/Desktop/BroadcastApp/client/src/utils/getStore.js"],"names":["createStore","applyMiddleware","compose","routerMiddleware","createSagaMiddleware","createReducer","initSagas","getStore","initialState","history","composeEnhancers","reduxSagaMonitorOptions","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","__SAGA_MONITOR_EXTENSION__","sagaMonitor","sagaMiddleware","middlewares","enhancers","store"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,aAAP,MAA0B,YAA1B;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,eAAe,SAASC,QAAT,CAAkBC,YAAY,GAAG,EAAjC,EAAqCC,OAArC,EAA8C;AAC3D,MAAIC,gBAAgB,GAAGR,OAAvB;AACA,MAAIS,uBAAuB,GAAG,EAA9B;AACA;;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,OAAOC,MAAP,KAAkB,QAA/D,EAAyE;AACvE;AACA,QAAIA,MAAM,CAACC,oCAAX,EACEN,gBAAgB,GAAGK,MAAM,CAACC,oCAAP,CAA4C,EAA5C,CAAnB;AACF,QAAID,MAAM,CAACE,0BAAX,EACEN,uBAAuB,GAAG;AACxBO,MAAAA,WAAW,EAAEH,MAAM,CAACE;AADI,KAA1B;AAGF;AACD;;AAED,QAAME,cAAc,GAAGf,oBAAoB,CAACO,uBAAD,CAA3C;AAEA,QAAMS,WAAW,GAAG,CAACD,cAAD,EAAiBhB,gBAAgB,CAACM,OAAD,CAAjC,CAApB;AAEA,QAAMY,SAAS,GAAG,CAACpB,eAAe,CAAC,GAAGmB,WAAJ,CAAhB,CAAlB;AAEA,QAAME,KAAK,GAAGtB,WAAW,CACvBK,aAAa,EADU,EAEvBG,YAFuB,EAGvBE,gBAAgB,CAAC,GAAGW,SAAJ,CAHO,CAAzB;AAMAf,EAAAA,SAAS,CAACa,cAAD,CAAT;AAEA,SAAOG,KAAP;AACD","sourcesContent":["/**\r\n * Create the store with dynamic reducers\r\n */\r\n\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { routerMiddleware } from 'connected-react-router';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport createReducer from './reducers';\r\nimport { initSagas } from './initSagas';\r\n\r\nexport default function getStore(initialState = {}, history) {\r\n  let composeEnhancers = compose;\r\n  let reduxSagaMonitorOptions = {};\r\n  /* istanbul ignore next */\r\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\r\n    /* eslint-disable no-underscore-dangle */\r\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__)\r\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\r\n    if (window.__SAGA_MONITOR_EXTENSION__)\r\n      reduxSagaMonitorOptions = {\r\n        sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\r\n      };\r\n    /* eslint-enable */\r\n  }\r\n\r\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\r\n\r\n  const middlewares = [sagaMiddleware, routerMiddleware(history)];\r\n\r\n  const enhancers = [applyMiddleware(...middlewares)];\r\n\r\n  const store = createStore(\r\n    createReducer(),\r\n    initialState,\r\n    composeEnhancers(...enhancers)\r\n  );\r\n\r\n  initSagas(sagaMiddleware);\r\n\r\n  return store;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}