{"ast":null,"code":"import { take, fork, call, put, takeLatest, select } from 'redux-saga/effects';\nimport { eventChannel } from 'redux-saga';\nimport { INITIATE_WS_CONNECTION, SEND_BY_WS, ADD_VIEWER, VIEWER_CONNECTED, VIEWER_DISCONNECTED, HOST_CONNECTED, HOST_DISCONNECTED } from './constants';\nimport getWebSocket from '../../utils/getWebSocket';\nimport { displayNotification } from '../Notifications/actions';\nimport { WSConnected, viewerConnected, viewerDisconnected, hostConnected, hostDisconnected } from './actions';\nimport * as streamsApi from '../../api/streams';\nimport { Auth_NicknameSelector } from '../Auth/selectors';\nexport default function* rootSaga() {\n  yield fork(flow);\n  yield fork(connectionsHandlers);\n}\nexport function* connectionsHandlers() {\n  yield takeLatest(VIEWER_CONNECTED, handleViewerConnection);\n  yield takeLatest(VIEWER_DISCONNECTED, handleViewerDisconnection);\n  yield takeLatest(HOST_CONNECTED, handleHostConnection);\n  yield takeLatest(HOST_DISCONNECTED, handleHostDisconnection);\n}\nexport function* flow() {\n  yield take(INITIATE_WS_CONNECTION);\n  const socket = yield call(connect);\n  yield put(WSConnected(socket.id));\n  yield fork(read, socket);\n  yield fork(write, socket);\n}\n\nfunction connect() {\n  const socket = getWebSocket();\n  return new Promise(resolve => {\n    socket.on('connect', () => {\n      resolve(socket);\n    });\n  });\n}\n\nfunction* read(socket) {\n  const channel = yield call(subscribe, socket);\n\n  while (true) {\n    let action = yield take(channel);\n    yield put(action);\n  }\n}\n\nexport function subscribe(socket) {\n  return new eventChannel(emit => {\n    const handleViewerConnectionWS = data => {\n      return emit(viewerConnected(data));\n    };\n\n    const handleHostConnectionWS = data => {\n      return emit(hostConnected());\n    };\n\n    const handleHostDisconnectionWS = data => {\n      return emit(hostDisconnected());\n    };\n\n    const handleViewerDisconnectionWS = data => {\n      return emit(viewerDisconnected());\n    };\n\n    socket.on('viewerConnected', handleViewerConnectionWS);\n    socket.on('viewerDisconnected', handleViewerDisconnectionWS);\n    socket.on('hostConnected', handleHostConnectionWS);\n    socket.on('hostDisconnected', handleHostDisconnectionWS);\n    return () => {};\n  });\n}\nexport function* write(socket) {\n  while (true) {\n    const {\n      data\n    } = yield take(SEND_BY_WS);\n    socket.emit(data.type, data.info);\n  }\n}\nexport function* addViewerSaga() {\n  yield takeLatest(ADD_VIEWER, addViewer);\n}\nexport function* addViewer(action) {\n  try {\n    const result = yield streamsApi.addViewer(action.payload);\n  } catch (error) {\n    console.error(error);\n  }\n}\nexport function* handleViewerConnection(action) {\n  const {\n    nickname,\n    message\n  } = action.payload;\n  const channelNickname = yield select(Auth_NicknameSelector);\n\n  if (nickname === channelNickname) {\n    yield put(displayNotification({\n      message: message\n    }));\n  }\n}\nexport function* handleHostConnection() {\n  yield put(displayNotification({\n    message: 'Host connected'\n  }));\n}\nexport function* handleHostDisconnection() {\n  yield put(displayNotification({\n    message: 'Host disconnected.'\n  }));\n}\nexport function* handleViewerDisconnection() {\n  yield put(displayNotification({\n    message: 'Viewer disconnected.'\n  }));\n}","map":{"version":3,"sources":["C:/Users/MircoFiocchi/Desktop/BroadcastApp/client/src/containers/App/saga.js"],"names":["take","fork","call","put","takeLatest","select","eventChannel","INITIATE_WS_CONNECTION","SEND_BY_WS","ADD_VIEWER","VIEWER_CONNECTED","VIEWER_DISCONNECTED","HOST_CONNECTED","HOST_DISCONNECTED","getWebSocket","displayNotification","WSConnected","viewerConnected","viewerDisconnected","hostConnected","hostDisconnected","streamsApi","Auth_NicknameSelector","rootSaga","flow","connectionsHandlers","handleViewerConnection","handleViewerDisconnection","handleHostConnection","handleHostDisconnection","socket","connect","id","read","write","Promise","resolve","on","channel","subscribe","action","emit","handleViewerConnectionWS","data","handleHostConnectionWS","handleHostDisconnectionWS","handleViewerDisconnectionWS","type","info","addViewerSaga","addViewer","result","payload","error","console","nickname","message","channelNickname"],"mappings":"AAAA,SAASA,IAAT,EAAeC,IAAf,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,MAA5C,QAA0D,oBAA1D;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SACEC,sBADF,EAEEC,UAFF,EAGEC,UAHF,EAIEC,gBAJF,EAKEC,mBALF,EAMEC,cANF,EAOEC,iBAPF,QAQO,aARP;AASA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SACEC,WADF,EAEEC,eAFF,EAGEC,kBAHF,EAIEC,aAJF,EAKEC,gBALF,QAMO,WANP;AAOA,OAAO,KAAKC,UAAZ,MAA4B,mBAA5B;AACA,SAASC,qBAAT,QAAsC,mBAAtC;AAEA,eAAe,UAAUC,QAAV,GAAqB;AAClC,QAAMtB,IAAI,CAACuB,IAAD,CAAV;AACA,QAAMvB,IAAI,CAACwB,mBAAD,CAAV;AACD;AAED,OAAO,UAAUA,mBAAV,GAAgC;AACrC,QAAMrB,UAAU,CAACM,gBAAD,EAAmBgB,sBAAnB,CAAhB;AACA,QAAMtB,UAAU,CAACO,mBAAD,EAAsBgB,yBAAtB,CAAhB;AACA,QAAMvB,UAAU,CAACQ,cAAD,EAAiBgB,oBAAjB,CAAhB;AACA,QAAMxB,UAAU,CAACS,iBAAD,EAAoBgB,uBAApB,CAAhB;AACD;AAED,OAAO,UAAUL,IAAV,GAAiB;AACtB,QAAMxB,IAAI,CAACO,sBAAD,CAAV;AACA,QAAMuB,MAAM,GAAG,MAAM5B,IAAI,CAAC6B,OAAD,CAAzB;AACA,QAAM5B,GAAG,CAACa,WAAW,CAACc,MAAM,CAACE,EAAR,CAAZ,CAAT;AACA,QAAM/B,IAAI,CAACgC,IAAD,EAAOH,MAAP,CAAV;AACA,QAAM7B,IAAI,CAACiC,KAAD,EAAQJ,MAAR,CAAV;AACD;;AAED,SAASC,OAAT,GAAmB;AACjB,QAAMD,MAAM,GAAGhB,YAAY,EAA3B;AACA,SAAO,IAAIqB,OAAJ,CAAaC,OAAD,IAAa;AAC9BN,IAAAA,MAAM,CAACO,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBD,MAAAA,OAAO,CAACN,MAAD,CAAP;AACD,KAFD;AAGD,GAJM,CAAP;AAKD;;AAED,UAAUG,IAAV,CAAeH,MAAf,EAAuB;AACrB,QAAMQ,OAAO,GAAG,MAAMpC,IAAI,CAACqC,SAAD,EAAYT,MAAZ,CAA1B;;AACA,SAAO,IAAP,EAAa;AACX,QAAIU,MAAM,GAAG,MAAMxC,IAAI,CAACsC,OAAD,CAAvB;AACA,UAAMnC,GAAG,CAACqC,MAAD,CAAT;AACD;AACF;;AAED,OAAO,SAASD,SAAT,CAAmBT,MAAnB,EAA2B;AAChC,SAAO,IAAIxB,YAAJ,CAAkBmC,IAAD,IAAU;AAChC,UAAMC,wBAAwB,GAAIC,IAAD,IAAU;AACzC,aAAOF,IAAI,CAACxB,eAAe,CAAC0B,IAAD,CAAhB,CAAX;AACD,KAFD;;AAIA,UAAMC,sBAAsB,GAAID,IAAD,IAAU;AACvC,aAAOF,IAAI,CAACtB,aAAa,EAAd,CAAX;AACD,KAFD;;AAIA,UAAM0B,yBAAyB,GAAIF,IAAD,IAAU;AAC1C,aAAOF,IAAI,CAACrB,gBAAgB,EAAjB,CAAX;AACD,KAFD;;AAIA,UAAM0B,2BAA2B,GAAIH,IAAD,IAAU;AAC5C,aAAOF,IAAI,CAACvB,kBAAkB,EAAnB,CAAX;AACD,KAFD;;AAIAY,IAAAA,MAAM,CAACO,EAAP,CAAU,iBAAV,EAA6BK,wBAA7B;AACAZ,IAAAA,MAAM,CAACO,EAAP,CAAU,oBAAV,EAAgCS,2BAAhC;AACAhB,IAAAA,MAAM,CAACO,EAAP,CAAU,eAAV,EAA2BO,sBAA3B;AACAd,IAAAA,MAAM,CAACO,EAAP,CAAU,kBAAV,EAA8BQ,yBAA9B;AACA,WAAO,MAAM,CAAE,CAAf;AACD,GAtBM,CAAP;AAuBD;AAED,OAAO,UAAUX,KAAV,CAAgBJ,MAAhB,EAAwB;AAC7B,SAAO,IAAP,EAAa;AACX,UAAM;AAAEa,MAAAA;AAAF,QAAW,MAAM3C,IAAI,CAACQ,UAAD,CAA3B;AACAsB,IAAAA,MAAM,CAACW,IAAP,CAAYE,IAAI,CAACI,IAAjB,EAAuBJ,IAAI,CAACK,IAA5B;AACD;AACF;AAED,OAAO,UAAUC,aAAV,GAA0B;AAC/B,QAAM7C,UAAU,CAACK,UAAD,EAAayC,SAAb,CAAhB;AACD;AAED,OAAO,UAAUA,SAAV,CAAoBV,MAApB,EAA4B;AACjC,MAAI;AACF,UAAMW,MAAM,GAAG,MAAM9B,UAAU,CAAC6B,SAAX,CAAqBV,MAAM,CAACY,OAA5B,CAArB;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF;AAED,OAAO,UAAU3B,sBAAV,CAAiCc,MAAjC,EAAyC;AAC9C,QAAM;AAAEe,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAwBhB,MAAM,CAACY,OAArC;AACA,QAAMK,eAAe,GAAG,MAAMpD,MAAM,CAACiB,qBAAD,CAApC;;AACA,MAAIiC,QAAQ,KAAKE,eAAjB,EAAkC;AAChC,UAAMtD,GAAG,CAACY,mBAAmB,CAAC;AAAEyC,MAAAA,OAAO,EAAEA;AAAX,KAAD,CAApB,CAAT;AACD;AACF;AAED,OAAO,UAAU5B,oBAAV,GAAiC;AACtC,QAAMzB,GAAG,CAACY,mBAAmB,CAAC;AAAEyC,IAAAA,OAAO,EAAE;AAAX,GAAD,CAApB,CAAT;AACD;AAED,OAAO,UAAU3B,uBAAV,GAAoC;AACzC,QAAM1B,GAAG,CAACY,mBAAmB,CAAC;AAAEyC,IAAAA,OAAO,EAAE;AAAX,GAAD,CAApB,CAAT;AACD;AAED,OAAO,UAAU7B,yBAAV,GAAsC;AAC3C,QAAMxB,GAAG,CAACY,mBAAmB,CAAC;AAAEyC,IAAAA,OAAO,EAAE;AAAX,GAAD,CAApB,CAAT;AACD","sourcesContent":["import { take, fork, call, put, takeLatest, select } from 'redux-saga/effects';\r\nimport { eventChannel } from 'redux-saga';\r\nimport {\r\n  INITIATE_WS_CONNECTION,\r\n  SEND_BY_WS,\r\n  ADD_VIEWER,\r\n  VIEWER_CONNECTED,\r\n  VIEWER_DISCONNECTED,\r\n  HOST_CONNECTED,\r\n  HOST_DISCONNECTED,\r\n} from './constants';\r\nimport getWebSocket from '../../utils/getWebSocket';\r\nimport { displayNotification } from '../Notifications/actions';\r\nimport {\r\n  WSConnected,\r\n  viewerConnected,\r\n  viewerDisconnected,\r\n  hostConnected,\r\n  hostDisconnected,\r\n} from './actions';\r\nimport * as streamsApi from '../../api/streams';\r\nimport { Auth_NicknameSelector } from '../Auth/selectors';\r\n\r\nexport default function* rootSaga() {\r\n  yield fork(flow);\r\n  yield fork(connectionsHandlers);\r\n}\r\n\r\nexport function* connectionsHandlers() {\r\n  yield takeLatest(VIEWER_CONNECTED, handleViewerConnection);\r\n  yield takeLatest(VIEWER_DISCONNECTED, handleViewerDisconnection);\r\n  yield takeLatest(HOST_CONNECTED, handleHostConnection);\r\n  yield takeLatest(HOST_DISCONNECTED, handleHostDisconnection);\r\n}\r\n\r\nexport function* flow() {\r\n  yield take(INITIATE_WS_CONNECTION);\r\n  const socket = yield call(connect);\r\n  yield put(WSConnected(socket.id));\r\n  yield fork(read, socket);\r\n  yield fork(write, socket);\r\n}\r\n\r\nfunction connect() {\r\n  const socket = getWebSocket();\r\n  return new Promise((resolve) => {\r\n    socket.on('connect', () => {\r\n      resolve(socket);\r\n    });\r\n  });\r\n}\r\n\r\nfunction* read(socket) {\r\n  const channel = yield call(subscribe, socket);\r\n  while (true) {\r\n    let action = yield take(channel);\r\n    yield put(action);\r\n  }\r\n}\r\n\r\nexport function subscribe(socket) {\r\n  return new eventChannel((emit) => {\r\n    const handleViewerConnectionWS = (data) => {\r\n      return emit(viewerConnected(data));\r\n    };\r\n\r\n    const handleHostConnectionWS = (data) => {\r\n      return emit(hostConnected());\r\n    };\r\n\r\n    const handleHostDisconnectionWS = (data) => {\r\n      return emit(hostDisconnected());\r\n    };\r\n\r\n    const handleViewerDisconnectionWS = (data) => {\r\n      return emit(viewerDisconnected());\r\n    };\r\n\r\n    socket.on('viewerConnected', handleViewerConnectionWS);\r\n    socket.on('viewerDisconnected', handleViewerDisconnectionWS);\r\n    socket.on('hostConnected', handleHostConnectionWS);\r\n    socket.on('hostDisconnected', handleHostDisconnectionWS);\r\n    return () => {};\r\n  });\r\n}\r\n\r\nexport function* write(socket) {\r\n  while (true) {\r\n    const { data } = yield take(SEND_BY_WS);\r\n    socket.emit(data.type, data.info);\r\n  }\r\n}\r\n\r\nexport function* addViewerSaga() {\r\n  yield takeLatest(ADD_VIEWER, addViewer);\r\n}\r\n\r\nexport function* addViewer(action) {\r\n  try {\r\n    const result = yield streamsApi.addViewer(action.payload);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nexport function* handleViewerConnection(action) {\r\n  const { nickname, message } = action.payload;\r\n  const channelNickname = yield select(Auth_NicknameSelector);\r\n  if (nickname === channelNickname) {\r\n    yield put(displayNotification({ message: message }));\r\n  }\r\n}\r\n\r\nexport function* handleHostConnection() {\r\n  yield put(displayNotification({ message: 'Host connected' }));\r\n}\r\n\r\nexport function* handleHostDisconnection() {\r\n  yield put(displayNotification({ message: 'Host disconnected.' }));\r\n}\r\n\r\nexport function* handleViewerDisconnection() {\r\n  yield put(displayNotification({ message: 'Viewer disconnected.' }));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}