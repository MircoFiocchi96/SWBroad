{"ast":null,"code":"import { take, fork, call, put, takeLatest, select } from 'redux-saga/effects';\nimport { eventChannel } from 'redux-saga';\nimport { INITIATE_WS_CONNECTION, SEND_BY_WS, ADD_VIEWER, VIEWER_CONNECTED } from './constants';\nimport getWebSocket from '../../utils/getWebSocket';\nimport { displayNotification } from '../Notifications/actions';\nimport { WSConnected, viewerConnected } from './actions';\nimport * as streamsApi from '../../api/streams';\nimport { Auth_NicknameSelector } from '../Auth/selectors';\nexport default function* rootSaga() {\n  yield fork(flow);\n  yield fork(connectionsHandlers);\n}\nexport function* connectionsHandlers() {\n  yield takeLatest(VIEWER_CONNECTED, handleViewerConnection);\n}\nexport function* flow() {\n  yield take(INITIATE_WS_CONNECTION);\n  const socket = yield call(connect);\n  yield put(WSConnected(socket.id));\n  yield fork(read, socket);\n  yield fork(write, socket);\n}\n\nfunction connect() {\n  const socket = getWebSocket();\n  return new Promise(resolve => {\n    socket.on('connect', () => {\n      resolve(socket);\n      console.log('Socket connected');\n    });\n  });\n}\n\nfunction* read(socket) {\n  const channel = yield call(subscribe, socket);\n\n  while (true) {\n    let action = yield take(channel);\n    yield put(action);\n  }\n}\n\nexport function subscribe(socket) {\n  return new eventChannel(emit => {\n    const handleViewerConnection = data => {\n      return emit(viewerConnected({\n        message: data\n      }));\n    };\n\n    socket.on('viewerConnected', handleViewerConnection);\n    return () => {};\n  });\n}\nexport function* write(socket) {\n  while (true) {\n    const {\n      data\n    } = yield take(SEND_BY_WS);\n    socket.emit(data.type, data.info);\n  }\n}\nexport function* addViewerSaga() {\n  yield takeLatest(ADD_VIEWER, addViewer);\n}\nexport function* addViewer(action) {\n  try {\n    const result = yield streamsApi.addViewer(action.payload);\n  } catch (error) {\n    console.error(error);\n  }\n}\nexport function* handleViewerConnection(action) {\n  const {\n    nickname\n  } = action.payload;\n  const channelNickname = yield select(Auth_NicknameSelector);\n\n  if (nickname === channelNickname) {\n    yield put(displayNotification({\n      message: action.payload.message\n    }));\n  }\n}","map":{"version":3,"sources":["C:/Users/MircoFiocchi/Desktop/BroadcastApp/client/src/containers/App/saga.js"],"names":["take","fork","call","put","takeLatest","select","eventChannel","INITIATE_WS_CONNECTION","SEND_BY_WS","ADD_VIEWER","VIEWER_CONNECTED","getWebSocket","displayNotification","WSConnected","viewerConnected","streamsApi","Auth_NicknameSelector","rootSaga","flow","connectionsHandlers","handleViewerConnection","socket","connect","id","read","write","Promise","resolve","on","console","log","channel","subscribe","action","emit","data","message","type","info","addViewerSaga","addViewer","result","payload","error","nickname","channelNickname"],"mappings":"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","sourcesContent":["import { take, fork, call, put, takeLatest, select } from 'redux-saga/effects';\r\nimport { eventChannel } from 'redux-saga';\r\nimport {\r\n  INITIATE_WS_CONNECTION,\r\n  SEND_BY_WS,\r\n  ADD_VIEWER,\r\n  VIEWER_CONNECTED,\r\n} from './constants';\r\nimport getWebSocket from '../../utils/getWebSocket';\r\nimport { displayNotification } from '../Notifications/actions';\r\nimport { WSConnected, viewerConnected } from './actions';\r\nimport * as streamsApi from '../../api/streams';\r\nimport { Auth_NicknameSelector } from '../Auth/selectors';\r\n\r\nexport default function* rootSaga() {\r\n  yield fork(flow);\r\n  yield fork(connectionsHandlers);\r\n}\r\n\r\nexport function* connectionsHandlers() {\r\n  yield takeLatest(VIEWER_CONNECTED, handleViewerConnection);\r\n}\r\n\r\nexport function* flow() {\r\n  yield take(INITIATE_WS_CONNECTION);\r\n  const socket = yield call(connect);\r\n  yield put(WSConnected(socket.id));\r\n  yield fork(read, socket);\r\n  yield fork(write, socket);\r\n}\r\n\r\nfunction connect() {\r\n  const socket = getWebSocket();\r\n  return new Promise((resolve) => {\r\n    socket.on('connect', () => {\r\n      resolve(socket);\r\n      console.log('Socket connected');\r\n    });\r\n  });\r\n}\r\n\r\nfunction* read(socket) {\r\n  const channel = yield call(subscribe, socket);\r\n  while (true) {\r\n    let action = yield take(channel);\r\n    yield put(action);\r\n  }\r\n}\r\n\r\nexport function subscribe(socket) {\r\n  return new eventChannel((emit) => {\r\n    const handleViewerConnection = (data) => {\r\n      return emit(viewerConnected({ message: data }));\r\n    };\r\n\r\n    socket.on('viewerConnected', handleViewerConnection);\r\n    return () => {};\r\n  });\r\n}\r\n\r\nexport function* write(socket) {\r\n  while (true) {\r\n    const { data } = yield take(SEND_BY_WS);\r\n    socket.emit(data.type, data.info);\r\n  }\r\n}\r\n\r\nexport function* addViewerSaga() {\r\n  yield takeLatest(ADD_VIEWER, addViewer);\r\n}\r\n\r\nexport function* addViewer(action) {\r\n  try {\r\n    const result = yield streamsApi.addViewer(action.payload);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nexport function* handleViewerConnection(action) {\r\n  const { nickname } = action.payload;\r\n  const channelNickname = yield select(Auth_NicknameSelector);\r\n  if (nickname === channelNickname) {\r\n    yield put(displayNotification({ message: action.payload.message }));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}